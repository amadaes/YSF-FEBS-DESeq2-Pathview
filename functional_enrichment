if (!require("BiocManager", quietly = FALSE)) install.packages("BiocManager")
BiocManager::install("AnnotationHub")
BiocManager::install("AnnotationDbi")
BiocManager::install("stats4")
BiocManager::install("IRanges")
BiocManager::install("S4Vectors")
BiocManager::install("AnnotationForge")
BiocManager::install("biomaRt") #needed for makeOrgPackageFromNCBI - processing GO data
BiocManager::install("clusterProfiler")
BiocManager::install("pathview")
BiocManager::install("enrichplot")
BiocManager::install("ggplot2")
install.packages("Rtools")
# 
# # Make an organism package for Paenarthrobacter nicotinovorans -----------------------------------------------------------
# # https://bioconductor.org/packages/devel/bioc/vignettes/AnnotationForge/inst/doc/MakingNewOrganismPackages.html
# 
library(AnnotationDbi)
library(AnnotationForge)
makeOrgPackageFromNCBI(version = "0.1",
                       author = "Amada El-Sabeh <amadaelsabeh@gmail.com>",
                       maintainer = "Amada El-Sabeh <amadaelsabeh@gmail.com>",
                       outputDir = ".",
                       tax_id = "29320",
                       genus = "Paenarthrobacter",
                       species = "nicotinovorans",
                       rebuildCache=FALSE)

#we created a package with the db for Pnic, now we will install this package and call the library

# #INSTALL THE FIRST TIME, AFTER THAN WE CAN JUST CALL THE LIBRARY
install.packages("D:/Activitati/Doctorat/4_REFERAT2/DESeq/org.Pnicotinovorans.eg.db", repo = NULL, type = "source")
library(org.Pnicotinovorans.eg.db)

# Inspect content of OrgPackage -----------------------------------------------------------

#inspect the object (output in console)
org.Pnicotinovorans.eg.db 

#keytype - This is the source of the annotation (gene ids). The options vary for each annotation. 
#check which options are available with the following (output in console):
# [1] "ACCNUM"      "ALIAS"       "ENTREZID"    "EVIDENCE"    "EVIDENCEALL" "GENENAME"    "GID"         "GO"          "GOALL"       "ONTOLOGY"    "ONTOLOGYALL"
# [12] "PMID"        "REFSEQ"      "SYMBOL"  

keytypes(org.Pnicotinovorans.eg.db) 

#extract some sample keys of a particular type using keys and head to actually look at the output in the console
#ALIAS: the locus tags: JMY_...; GENENAME: actual gene names; GO: Gene Ontology ID 

head(keys(org.Pnicotinovorans.eg.db, keytype="ALIAS"))

#Create and set output directory
library(stringr)
dir.create("D:/Activitati/Doctorat/4_REFERAT2/date/DESeq2_analysis_results/kept_samples_funct_analysis/")
# dir.create("D:/Activitati/Doctorat/4_REFERAT2/date/DESeq2_analysis_results/kept_samples_funct_analysis/nic_vs_nic_merge/")
# setwd("D:/Activitati/Doctorat/4_REFERAT2/date/DESeq2_analysis_results/kept_samples_funct_analysis/nic_vs_nic_merge/")

dir.create("D:/Activitati/Doctorat/4_REFERAT2/date/DESeq2_analysis_results/kept_samples_funct_analysis/nic_vs_no_nic_merge/")
setwd("D:/Activitati/Doctorat/4_REFERAT2/date/DESeq2_analysis_results/kept_samples_funct_analysis/nic_vs_no_nic_merge/")


# # #Preparing list of significantly DE genes and names list -----------------------------------------------------------
# # #https://learn.gencore.bio.nyu.edu/rna-seq-analysis/over-representation-analysis/

# #For multiple DESeq2 Results files

library("dplyr")

# # #reading input from deseq2 - Wald test results for all relevant comparisons
# df1 = read.csv("D:/Activitati/Doctorat/4_REFERAT2/date/DESeq2_analysis_results/kept_samples_DE_analysis/res_tables_with_Geneid/nic_T2_vs_nic_T1.csv", sep=",")
# df1 <- df1[,c(1,3,7)]
# 
# df2 = read.csv("D:/Activitati/Doctorat/4_REFERAT2/date/DESeq2_analysis_results/kept_samples_DE_analysis/res_tables_with_Geneid/nic_T3_vs_nic_T1.csv", sep=",")
# df2 <- df2[,c(1,3,7)]
# 
# df3 = read.csv("D:/Activitati/Doctorat/4_REFERAT2/date/DESeq2_analysis_results/kept_samples_DE_analysis/res_tables_with_Geneid/nic_T3_vs_nic_T2.csv", sep=",")
# df3 <- df3[,c(1,3,7)]

df1 = read.csv("D:/Activitati/Doctorat/4_REFERAT2/date/DESeq2_analysis_results/kept_samples_DE_analysis/res_tables_with_Geneid/T1_nic_vs_no_nic.csv", sep=",")
df1 <- df1[,c(1,3,7)]

df2 = read.csv("D:/Activitati/Doctorat/4_REFERAT2/date/DESeq2_analysis_results/kept_samples_DE_analysis/res_tables_with_Geneid/T2_nic_vs_no_nic.csv", sep=",")
df2 <- df2[,c(1,3,7)]

df3 = read.csv("D:/Activitati/Doctorat/4_REFERAT2/date/DESeq2_analysis_results/kept_samples_DE_analysis/res_tables_with_Geneid/T3_nic_vs_no_nic.csv", sep=",")
df3 <- df3[,c(1,3,7)]

rna_all_df <- merge(df1, df2, by="X", all=TRUE)
rna_all_df <- merge(rna_all_df, df3, by="X", all=TRUE)
make.unique(colnames(rna_all_df))
colnames(rna_all_df) <- c("X", "log2FoldChange.1", "padj.1", "log2FoldChange.2", "padj.2", "log2FoldChange.3", "padj.3")

significant_rna <- subset(rna_all_df, (padj.1 <0.1 & abs(log2FoldChange.1)>=1) | (padj.2 <0.1 & abs(log2FoldChange.2)>=1) )
# rna_all_df <- rna_all_df[,-c(4, 7, 10, 13, 16)]
#REMOVE PADJ COLUMNS
significant_rna <- significant_rna[,c(1,2,4,6)]
#sort the list in decreasing order (required for clusterProfiler)
significant_rna <- arrange(significant_rna, desc(log2FoldChange.1), desc(log2FoldChange.2), desc(log2FoldChange.3))

rescaled <- significant_rna

# #assign value of 0 to -1< LFC <1
rescaled <- rescaled %>%
  mutate(across(.cols = c(2,3,4), .fns = function(y) ifelse(abs(y) <= 1, 0, y)))

# # #across all DESeq2 comparisons, LFC = [-8, 6], so we will rescale [-1,1] to fit these values
# 
# # #rescale FC = [-8, -1) with *0.1428 ---- from [-8, -1) there are 7 intervals/ units
# rescaled <- rescaled %>%
#   mutate(across(.cols = c(2,3,4), .fns = function(y) ifelse((y >=-8 & y < -1), y*0.1428, y)))
# 
# # #rescale FC = (1, 6] with *0.2 ---- from (1, 6] there are 5 intervals/ units
# rescaled <- rescaled %>%
#   mutate(across(.cols = c(2,3,4), .fns = function(y) ifelse((y > 1 & y <= 6), y*0.2, y)))

# #keep only LFC info
# original_gene_list <- rescaled[,2:4]
# #give back names to the LFC values
# rownames(original_gene_list) <- rescaled$X #the same as ALIAS from org.Pnicotinovorans.eg.db
# gene_list<-original_gene_list
# gene_list <- arrange(gene_list, desc(log2FoldChange.1), desc(log2FoldChange.2), desc(log2FoldChange.3))
# genes <- rownames(original_gene_list)
# genes = sort(genes, decreasing = TRUE)

# #------FOR PROTEOMICS RESULTS -------------------------------------------

# #For multiple results files: 

# #----reading in input from Scaffold files - modified to fit with DESeq2 input
# # KEEPS ALL NA VALUES, MUST SORT THIS OUT SOMEHOW
# 
 # df.p1 = read.csv("D:/Activitati/Doctorat/4_REFERAT2/date/proteomics/1_Scaffold_results/nic_T2_vs_T1_rescaled.csv", sep=",")
 # df.p2 = read.csv("D:/Activitati/Doctorat/4_REFERAT2/date/proteomics/1_Scaffold_results/nic_T3_vs_T1_rescaled.csv", sep=",")
 # df.p3 = read.csv("D:/Activitati/Doctorat/4_REFERAT2/date/proteomics/1_Scaffold_results/nic_T3_vs_T2_rescaled.csv", sep=",")
 df.p1 = read.csv("D:/Activitati/Doctorat/4_REFERAT2/date/proteomics/1_Scaffold_results/T1_nic_vs_no_nic_rescaled.csv", sep=",")
 df.p2 = read.csv("D:/Activitati/Doctorat/4_REFERAT2/date/proteomics/1_Scaffold_results/T2_nic_vs_no_nic_rescaled.csv", sep=",")
 df.p3 = read.csv("D:/Activitati/Doctorat/4_REFERAT2/date/proteomics/1_Scaffold_results/T3_nic_vs_no_nic_rescaled.csv", sep=",")

 prot_all_df <- merge(df.p1, df.p2, by="X", all=TRUE)
 prot_all_df <- merge(prot_all_df, df.p3, by="X", all=TRUE)
 significant_prot <- prot_all_df
 
# significant_prot <- subset(prot_all_df[-c(192,193),])
# significant[significant=="na"] <- NA

# significant_prot <- arrange(significant_prot, desc(log2FoldChange.x), desc(log2FoldChange.y), desc(log2FoldChange))
# original_gene_list_prot <- significant_prot[,2:4]
# rownames(original_gene_list_prot) <- significant_prot$X #the same as ALIAS from org.Pnicotinovorans.eg.db
# # omit any NA values
# gene_list_prot<-original_gene_list_prot
# genes_prot <- rownames(original_gene_list_prot)
# genes_prot = sort(genes_prot, decreasing = TRUE)

# #------FOR MERGED RESULTS -------------------------------------------

significant_all <- merge(rescaled, significant_prot, by="X", all=TRUE)
significant_all <- significant_all[!duplicated(significant_all), ]
original_gene_list_all <- significant_all[,2:7]
original_gene_list_all <- original_gene_list_all[,c("log2FoldChange.1", "log2FoldChange.x", "log2FoldChange.2", "log2FoldChange.y", "log2FoldChange.3", "log2FoldChange" )]
colnames(original_gene_list_all)
# #remove duplicated rows
rownames(original_gene_list_all) <- significant_all$X #the same as ALIAS from org.Pnicotinovorans.eg.db
# omit any NA values
gene_list<-original_gene_list_all
genes <- rownames(original_gene_list_all)
genes = sort(genes, decreasing = TRUE)


# clusterProfiler -----------------------------------------------------------
# https://yulab-smu.top/biomedical-knowledge-mining-book/clusterprofiler-kegg.html

##The clusterProfiler package supports all organisms that have KEGG annotation data available in the KEGG database. 
#to search KEGG db for Pnic: search_kegg_organism('pnv', by='kegg_code')
#we'll get one hit,  kegg_code  6953               scientific_name   pnv Paenarthrobacter nicotinovorans 

#-----Gene Set Enrichment  -----------------------------------------------------------
#https://learn.gencore.bio.nyu.edu/rna-seq-analysis/gene-set-enrichment-analysis/
#ONLY WORKS FOR EACH DE COMPARISON (each individual DESeq2 output)

# library(clusterProfiler)
# gse <- gseGO(geneList=gene_list,
#              ont ="ALL",
#              keyType = "ALIAS",
#              pvalueCutoff = 0.1,
#              verbose = TRUE,
#              OrgDb = "org.Pnicotinovorans.eg.db",
#              pAdjustMethod = "BH")
#
# # GSE OUPUT:
# #dotplot
# require(DOSE)
# library(ggplot2)
library(Cairo)
#
# grDevices::cairo_pdf(file="dose_dotplot.pdf")
# dotplot(gse, showCategory=20, split=".sign") + facet_grid(.~.sign)
# dev.off()
#
# png(file="dose_dotplot.png", 500, 1000, pointsize=20)
# # dotplot(gse)
# dotplot(gse, showCategory=20, split=".sign") + facet_grid(.~.sign)
# dev.off()
#
# #cnetplot
# #depicts the linkages of genes and biological concepts (e.g. GO terms or KEGG pathways) as a network (helpful to see which genes are involved in enriched pathways and genes that may belong to multiple annotation categories).
# pdf(file="cnet_plot.pdf", paper="USr", width=8, height=14)
# cnetplot(gse, categorySize="pvalue", showCategory = 20)
# dev.off()
#
# #Ridgeplot
# library(ggridges)
# pdf(file="ridge_plot.pdf", paper="USr", width=8, height=14)
# ridgeplot(gse, showCategory = 20)
# dev.off()

# KEGG Enrichment  -----------------------------------------------------------
library(clusterProfiler)

# # KEGG pathway over-representation analysis for INDIVIDUAL RNA-Seq results
KEGG_enrich <- enrichKEGG(gene = genes, organism = "pnv", pvalueCutoff = 0.1, pAdjustMethod = "BH")
write.csv(KEGG_enrich, file="KEGG_enrich.csv")

# # KEGG pathway over-representation analysis for INDIVIDUAL MS results
# KEGG_enrich2 <- enrichKEGG(gene = genes2, organism = "pnv", pvalueCutoff = 0.1, pAdjustMethod = "BH")
# write.csv(KEGG_enrich2, file="KEGG_enrich2.csv")

# Visualize enriched KEGG pathways using browseKEGG -----------------------------------------------------------
# Go here and select prefix: pnv, then search pathways https://www.genome.jp/kegg/pathway.html 
# available pathways for Pnic: https://www.kegg.jp/kegg-bin/search_pathway_text?map=pnv&keyword=&mode=1&viewImage=true
# WE CAN LOOK AT KEGG_enrich.csv to see which pathways are actually over-represented

# Visualize enriched KEGG pathways using pathview -----------------------------------------------------------
library("pathview")
# #set working directory (where you want output to be saved)
# #setwd("pathview")

# for each pathway you find to be overrepresented using enrichKEGG, you can plot it using pathview

# high=max(gene_list)
# low=min(gene_list)
# mid=median(gene_list)

# #make a list of enriched pathways for RNA-Seq results
sig_paths <- KEGG_enrich$ID

# #print(sig_paths)

# #FOR RNA-Seq reuslts: loop through list of significant pathways and generate figure for each one:
# #some KEGG pathways are not mappable, so it might output empty files
all_paths <- c("pnv00760", "pnv00220", "pnv00650", "pnv02020", "pnv01120", "pnv00790", "pnv00860", "pnv01240", "pnv00290", "pnv03018", "pnv03010", "pnv01230", "pnv00190", "pnv00020", "pnv01110", "pnv03070", "pnv00920", "pnv01210", "pnv00010", "pnv00250", "pnv00270", "pnv00230")

key.positions <- setNames(c("bottomright", "bottomright", "bottomright", "topright", "topleft", "bottomright", "topright", "topright", "topright", "topright", "bottomright", "bottomright", "topright", "topright", "bottomright", "bottomright", "bottomright", "bottomleft", "topright", "topright", "topright", "topright"), 
                          c("pnv00760", "pnv00650", "pnv00220", "pnv02020", "pnv01120", "pnv00790", "pnv00860", "pnv01240", "pnv00290", "pnv03018", "pnv03010", "pnv01230", "pnv00190", "pnv00020", "pnv01110", "pnv03070", "pnv00920", "pnv01210", "pnv00010", "pnv00250", "pnv00270", "pnv00230"))


# #for each one which MIGHT be relevant, use all_paths and check individual KEGG_enrich files to see if there is significance 
# #for significant pathways only, use i in sig_paths

# #FOR RNA RESULTS: USE THIS FOR GRAPHS WITH GENE NAMES WHERE THEY ARE AVAILABLE - same.layer = F

for (i in sig_paths) 
{
  skip_to_next <- FALSE
  
  tryCatch(
    pathview_res <- pathview(gene.data  = gene_list[,1:6],
                             pathway.id = i,
                             species    = "pnv",
                             gene.idtype = "KEGG",
                             kegg.native = T,
                             match.data = FALSE,
                             keys.align = "y",
                             key.pos = key.positions[i],
                             same.layer = F,
                             both.dirs = TRUE,
                             bins = 16,
                             limit = c(-8, 8),
                             high = "red", mid = "gray", low = "green",
                             # #na.col = "gray",
                             cex = 0.15,
                             out.suffix = "gene_names_RNA_MS"),

        error = function(e)     { skip_to_next <<- TRUE})
  
  if(skip_to_next)  { next }  
}

# #this is for same layer = T
for (i in sig_paths) 
{
  skip_to_next <- FALSE
  
  tryCatch(
    pathview_res <- pathview(gene.data  = gene_list[,1:6],
                             pathway.id = i,
                             species    = "pnv",
                             gene.idtype = "KEGG",
                             kegg.native = T,
                             match.data = FALSE,
                             keys.align = "y",
                             key.pos = key.positions[i],
                             same.layer = T,
                             both.dirs = TRUE,
                             bins = 16,
                             limit = c(-8, 8),
                             high = "red", mid = "gray", low = "green",
                             # #na.col = "gray",
                             out.suffix = "gene_ids_RNA_MS"),
    
    error = function(e)     { skip_to_next <<- TRUE})
  
  if(skip_to_next)  { next }  
}
